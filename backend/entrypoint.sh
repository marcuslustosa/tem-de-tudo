#!/bin/bash

echo "üöÄ Iniciando Tem de Tudo..."

# Configura ambiente
export APP_ENV=production
export APP_DEBUG=false

# Cria diret√≥rios essenciais
mkdir -p /var/www/html/storage/framework/{sessions,views,cache}
mkdir -p /var/www/html/storage/logs
mkdir -p /var/www/html/bootstrap/cache
mkdir -p /var/www/html/database

# Define permiss√µes
chown -R www-data:www-data /var/www/html/storage
chown -R www-data:www-data /var/www/html/bootstrap/cache
chmod -R 775 /var/www/html/storage
chmod -R 775 /var/www/html/bootstrap/cache

# Limpa caches
echo "üßπ Limpando caches..."
php artisan config:clear || true
php artisan route:clear || true
php artisan view:clear || true
php artisan cache:clear || true

# Gera chave se necess√°rio
echo "üîë Configurando APP_KEY..."
if [ -z "$APP_KEY" ] || [ "$APP_KEY" = "" ]; then
    php artisan key:generate --force --no-interaction || true
fi

# Verifica se vari√°veis do PostgreSQL est√£o definidas
if [ -n "$DB_HOST" ] && [ -n "$DB_PASSWORD" ]; then
    echo "üóÉÔ∏è Usando PostgreSQL..."
    export DB_CONNECTION=pgsql
    
    # Tenta conectar ao PostgreSQL
    if php artisan migrate --force --no-interaction 2>/dev/null; then
        echo "‚úÖ PostgreSQL conectado com sucesso!"
    else
        echo "‚ùå Erro no PostgreSQL, usando SQLite como fallback..."
        export DB_CONNECTION=sqlite
        export DB_DATABASE=/var/www/html/database/database.sqlite
        
        touch /var/www/html/database/database.sqlite
        chown www-data:www-data /var/www/html/database/database.sqlite
        chmod 664 /var/www/html/database/database.sqlite
        
        php artisan migrate --force --no-interaction
    fi
else
    echo "üóÉÔ∏è Usando SQLite (vari√°veis PostgreSQL n√£o encontradas)..."
    export DB_CONNECTION=sqlite
    export DB_DATABASE=/var/www/html/database/database.sqlite
    
    touch /var/www/html/database/database.sqlite
    chown www-data:www-data /var/www/html/database/database.sqlite
    chmod 664 /var/www/html/database/database.sqlite
    
    php artisan migrate --force --no-interaction
fi

# Seeds
echo "üå± Executando seeds..."
php artisan db:seed --force --no-interaction || true

# Cache final
echo "‚ö° Aplicando cache..."
php artisan config:cache || true
php artisan route:cache || true

echo "‚úÖ Aplica√ß√£o configurada! Iniciando Apache..."

# Inicia Apache
exec apache2-foreground

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="contato@temdetudo.com"
MAIL_FROM_NAME="Tem de Tudo"

SANCTUM_STATEFUL_DOMAINS="tem-de-tudo.onrender.com,localhost"
SESSION_DOMAIN=".temdetudo.com"

VITE_APP_NAME="Tem de Tudo"
EOF
else
    echo "‚úÖ Arquivo .env j√° existe"
fi

# Criar banco SQLite se n√£o existir para fallback
if [ ! -f /app/database/database.sqlite ]; then
    echo "üóÉÔ∏è Criando banco SQLite de fallback..."
    touch /app/database/database.sqlite
    chmod 664 /app/database/database.sqlite
fi

# Cache de configura√ß√£o otimizado
echo "‚ö° Otimizando cache..."
php artisan config:cache
php artisan route:cache
php artisan view:cache

# Rodar migrations
echo "üîÑ Executando migrations..."
php artisan migrate --force || echo "‚ö†Ô∏è Erro nas migrations (pode ser ignorado em primeira execu√ß√£o)"

# Seeder de usu√°rios de demonstra√ß√£o
echo "üë• Criando usu√°rios de demonstra√ß√£o..."
php artisan db:seed --force || echo "‚ö†Ô∏è Erro no seeder (pode ser ignorado)"

# Criar link simb√≥lico para storage
echo "üîó Criando link do storage..."
php artisan storage:link || echo "‚ö†Ô∏è Erro no storage link (pode ser ignorado)"

# Limpar caches antigos
echo "üßπ Limpando caches..."
php artisan cache:clear
php artisan view:clear
php artisan config:clear

# Cache final
echo "üí´ Cache final..."
php artisan config:cache
php artisan route:cache

echo "‚úÖ Deploy conclu√≠do! Iniciando servidor na porta $PORT"

# Iniciar o servidor
exec php -S 0.0.0.0:$PORT -t public